"""
n,m=map(int,input().split())
a=[]
for i in range(n):
    b=list(map(int,input().split()))
    a.append(b)
print(a)
d=[]
for i in range(n):
    c=0
    for j in range(m):
        c+=a[j][i]
    d.append(c)
m=max(d)
for k in d:
    if k==m:
        print(j)
"""

#Binary search:
"""
n=int(input())
a=[int(i) for i in input().split()]
t=int(input())
k=[]
l=0
h=len(a)-1
while l<=h:
    m=(l+h)>>1
    if a[m]==t:
        print("Found")
    if a[m]<t:
        l=m+1
    if a[m]>t:
        h=m-1
print("Not FOund")
"""
#lower index and upper index of an array:
"""
def islower(a,t):
    l=0
    h=len(a)-1
    while l<=h:
        m=l+(h-l)//2
        if t<=a[m]:
            h=m-1
        else:
            l=m+1
    return l

def isupper(a,t):
    l=0
    h=len(a)-1
    while l<=h:
        m=l+(h-1)//2
        if t>=a[m]:
            l=m+1
        else:
            h=m-1
    return h
    
        
a=[int(i) for i in input().split()]
t=int(input())
#p=islower(a,t)
q=isupper(a,t)
print(q)
"""
#Recycling pens:
"""
def recyclePens(n, r, k, c):
    # Write your code here
    l=1
    h=n
    while l<=h:
        m=(l+h)>>1
        a=r+(n-m)*k
        if (m*c)<=a:
            l=m+1
        else:
            h=m-1
    return h
"""

#koko eating bananas:
"""
def koko(p,h):
    
    
a=[int(i) for i in input().split()]
h=int(input())
l=1
r=max(a)
 """
#GCD if a person starts from 1,1:
"""
import math 
n=int(input())
for i in range(n):
    x,y=map(int,input().split())
    if (math.gcd(x,y)==1):
        print("yes")
    else:
        print("no")
"""
#find gcd and x,y for 12,24:
"""
def isGcd(a,b):
    if a<b:
        a,b=b,a
        q=a/b
        r=a%b
        t1=0
        t2=1
        t=(t1-t2)*q
    
    else:
        q=a/b
        r=a%b
        t1=0
        t2=1
        t=(t1-t2)*q
    return t
a,b=map(int,input().split())
print(isGcd(a,b))
"""
#----prefix algorithm :
"""
n=int(input())
a=list(map(int,input().split()))
b=[0]*len(a)
b[0]=a[0]
for i in range(1,len(a)):
    b[i]=b[i-1]+a[i]

print(b)
"""

#Prime Factors using seive:
"""
prime=[True for i in range(20)]
def seive():
    
    for i in range(2,20):
        prime[0]=prime[1]=0
        for j in range(i*i,20,i):
            prime[j]=False
            j+=1
       

seive()
"""
#  seive to find prime:
"""
prime=[True for i in range(20)]

def seive():
    n=int(input())
    for i in range(2,20):
        prime[0]=prime[1]=0
        for j in range(i*i,20,i):
            prime[j]=False

seive()
for k in range(len(prime)):
    if prime[k]==True:
        print(k,end=" " )
"""
# seive:
"""
prime=[True for i in range(n)]
        def seive(self,n):
            i=2
            while(i*i<=n):
                if(prime[i]==True):
                    for j in range(i*i,n,i):
                        prime[j]=False
                i+=1
            prime[0]=prime[1]=False
        
        if(n<=1):
            return 0
        seive(self,n)
 """
#example should do in prefix:
"""
q   3
L  R  X
0  3  8
1  4  2
0  2  4
"""
"""
q=int(input())
a=list(map(int,input().split()))
for i in range(q):
        L,R,X=map(int,input().split())
        for j in range(L,R+1):
                a[j]+=X
print(a)
"""
#equilibrium point:
"""
n=int(input())
a=list(map(int,input().split()))
pre=[0]*len(a)
pre[0]=a[0]
for i in range(1,len(a)):
    pre[i]=pre[i-1]+a[i]
for j in range(1,len(a)-1):
        if pre[-1]-pre[j]==pre[j-1]:
                print(j+1)
"""

#Binary search on unsorted array - slip array largest sum:
"""
def num(n,a,m):
    i=-1
    s=0
    c=1
    if m==1:
        b=max(a)
        return b
    elif m==len(a):
        d=sum(a)
        return d
    else:
        while b<=d:
            m=(b+d)//2
            for i in range(len(a)):
                s+=a[i]
                if s<=m:
                    c+=1
                    if c==m:
                        d=m-1
                    if c>m:
                        b=m+1
            return c
        
n=int(input())
a=list(map(int,input().split()))
k=int(input())
print(num(n,a,k))
"""
#Two pointer algorithm on strings:
"""
def isPalin(s):
    i=0
    j=len(s)-1
    while i<j:
        if s[i]!=s[j]:
            return False
        i+=1
        j-=1
    else:
        return True
s=input()
if isPalin(s):
    print("YES")
else:
    print("NO")
"""

#recursion 07/04/2022:
#0 to n:
"""
def fun(c,n):
    if c>n:
        return
    else:
        print(c)
        return fun(c+1,n)
        
c=int(input())
n=int(input())
fun(c,n)
"""
#n to 1:
"""
def fun(c,n):
    if c<n:
        return
    else:
        print(c)
        return fun(c-1,n)
        
c,n=map(int,input().split())
fun(c,n)
"""
#without using extra variable 1 to n:
"""
def fun(n):
    if n==0:
        return
    
    fun(n-1)
    print(n)
n=int(input())
fun(n)
"""

#without using extra variable n to 1:
"""
def fun(n):
    if n==0:
        return
    
    
    print(n)
    fun(n-1)
n=int(input())
fun(n)
"""
#backtracking n to 1:
"""
def fun(p,n):
    if n==0:
        return n
    else:
        fun(p+1,n-1)
        print(p)

n=int(input())
p=1
fun(p,n)
"""

#2356 find sum of digits:
#paramatirised
"""
def fun(n,s):
    if n==0:
        print(s)
        return
    else:
        s+=n%10
        fun(n//10,s)
        
        
n=int(input())
s=0
fun(n,s)
"""
#paramatirised
"""
def fun(n,c):
    if n==0:
        print(c)
        return
    else:
        r=n%10
        c+=1
        fun(n//10,c)
    
n=int(input())
c=0
fun(n,c)
"""
#functionalised:
"""
def fun(n):
    if n==0:
        return 0
    else:
        return (1+fun(n//10))
n=int(input())
print(fun(n))
"""
#fibonacci:
"""
def fibo(n):
    if n==0 or n==1:
        return n
    else:
        return fibo(n-1)+fibo(n-2)
n=int(input())
print(fibo(n))
"""
#recursion dp:
"""
def fun(n):
    dp=[-1]*(n+1)
    if n==0 or n==1:
        return n
    else:
        for i in range(n):
            if dp[i]!=-1:
                return dp[i]
        dp[n]=fun(n-1)+fun(n-2)
        return dp[n]
        
n=int(input())
print(fun(n))
"""
#GCD using recursion:
"""
def gcd(x,y):
    if x==0:
        return y
    if y==0:
        return x
    if x>y:
        return gcd(x-y,y)
    else:
        return gcd(x,y-x)
    

x,y=map(int,input().split())
print(gcd(x,y))    
"""    
        


    
        
    
